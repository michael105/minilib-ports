#mlconfig
ifdef undef
#
# type 'make -f minilib.conf'
# to use this combined config and makefile generated by mlcc,
# compile and download when needed (ca.100kB) with minilib.
# (https://github.com/michael105/minilib)
#
# Alternatively, when the script mlcc with the embedded minilib is already present,
# 'mlcc --config minilib.conf' 
# compiles without fetching minilib again.
#
# 
# Minilib and the accompanying tools are licensed under a 
# BSD-style opensource license with attribution.
# I did my best and I'm using minilib myself,
# but cannot give any guarantees for any functionality
# of an opensource library or the accompanying tools.
#
# (Disclaimer)
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Michael Myer BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The full license is available at the webpage of minilib.
# https://github.com/michael105/minilib
# Michael (misc) Myer, 2021
#


# Save default. The minibuf is needed for malloc, printf, and file streams.
mini_buf 4000
# define headerguards, to prevent parsing the standard header
HEADERGUARDS

# Startup function
mini_start

# put the globals on stack.
# reserves a fixed register as pointer to the globals
# globals_on_stack

# define var (#define var arg)
# DEFINE var arg

# optimization Flag. Os,O1,O2 might be save. O3 is known to cause sometimes trouble
OPTFLAG -Os

# (with debug info)
#OPTFLAG '-g -Og'

# stripflag ( defaults to -s)
#STRIPFLAG

# Build minilib source
INCLUDESRC

# the ldscript to use
# Can be one of: default, onlytext, textandbss
LDSCRIPT default

# Shrink the compiled binary with shrinkelf
#SHRINKELF

# generate debug info (-Og -g). Overwrites OPTFLAG, STRIPFLAG and SHRINKELF
#DEBUG

# generate debug info, including the source of minilib itself. (-Og -g). 
# Overwrites OPTFLAG, STRIPFLAG and SHRINKELF
#FULLDEBUG


# list of source files, supplied to gcc
# $1 expands to the current filename 
#SOURCES $1 file1.c file2.c

# the binary to be compiled ( -o $BINARY )
#BINARY a.out

# function switches. Only functions named below will be compiled
mini_abort
mini_access
mini_atoi
mini_chdir
mini_close
mini_closedir
mini_dup
mini_dup2
mini_errx
mini_execl
mini_execve
mini_exit
mini_fclose
mini_fcntl
mini_fdopen
mini_fileno
mini_fork
mini_fprintf
mini_fputs
mini_free
mini_fstat
mini_getenv
mini_getgid
mini_getgroups
mini_gethostname
mini_getpgrp
mini_getpid
mini_getpwnam
mini_getpwuid
mini_getuid
mini_ioctl
mini_isatty
mini_kill
mini_lseek
mini_lstat
mini_malloc
mini_memcmp
mini_memcpy
mini_memmove
mini_memset
mini_open
mini_opendir
mini_pipe
mini_printf
mini_putchar
mini_qsort
mini_raise
mini_read
mini_readdir
mini_realloc
mini_rewinddir
mini_setenv
mini_setgid
mini_setpgid
mini_setuid
mini_sigaction
mini_sigaddset
mini_sigemptyset
mini_signal
mini_sigprocmask
mini_snprintf
mini_stat
mini_strcasecmp
mini_strcat
mini_strchr
mini_strcmp
mini_strcpy
mini_strdup
mini_strerror
mini_strlcpy
mini_strlen
mini_strncasecmp
mini_strncmp
mini_strstr
mini_strtok
mini_strtol
mini_strtoll
mini_tcgetattr
mini_tcsetattr
mini_time
mini_umask
mini_unlink
mini_waitpid
mini_warn
mini_write

COMPILE getgrent stpcpy uname

return
endif
# configuration part ends, 
# embedded makefile starts below


VERSION := "20210629"
urlbase := "https://raw.githubusercontent.com/michael105/minilib/download"

fetch = $(shell ((curl $(urlbase)/$(VERSION)/$(1).gz > $(1).gz) || (wget $(urlbase)/$(1).gz)) && gunzip $(1).gz)


default: Makefile.minilib minilib.h check compile


compile:
	$(info Compile)
	make -f Makefile.minilib CONF="$(lastword $(MAKEFILE_LIST))"


Makefile.minilib:
	$(info "Download Makefile.minilib (Version $(VERSION))from github")
	$(call fetch,Makefile.minilib)


minilib.h:
	$(info "Download minilib.h (Version $(VERSION))from github")
	$(call fetch,minilib.h)


.ONESHELL:
check:
	@echo "Checking sha256 sums"
	echo -e "$(SHA256SUMS)" | sha256sum -c || exit
	echo ok 


# checksums 
define SHA256SUMS =
e7871196b083f725cfe6d8c4a3f84d4ad1e3c246495ad9c7e870e24f22b5b37c  minilib.h
a0f1cc92cc34fd55a500213069fcef2eda96006a71ef950c2a2744bd8fba6149  Makefile.minilib
endef


