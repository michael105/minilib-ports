#ifndef optinit_h
#define optinit_h
/*
 * File automatically generated by ./mkoptions.sh.
 * Do not edit, do not add to cvs.
 */

#ifdef DEFINE_OPTIONS
struct optent optlist[] = {
    { "allexport", 'a', 0, 0, 0 },
    { "cdprint", 0, 0, 0, 0 },
#ifdef DEBUG	
    { "debug", 0, 0, 0, 0 },
#endif
    { "emacs", 'E', 'V', 0, 0 },
    { "errexit", 'e', 0, 0, 0 },
    { "fork", 'F', 0, 0, 0 },
    { "ignoreeof", 'I', 0, 0, 0 },
    { "interactive", 'i', 0, 0, 0 },
    { "local_lineno", 'L', 0, 0, 1 },
    { "monitor", 'm', 0, 0, 0 },
    { "noclobber", 'C', 0, 0, 0 },
    { "noexec", 'n', 0, 0, 0 },
    { "noglob", 'f', 0, 0, 0 },
    { "nolog", 0, 0, 0, 0 },
    { "nopriv", 'p', 0, 0, 0 },
    { "notify", 'b', 0, 0, 0 },
    { "nounset", 'u', 0, 0, 0 },
    { "posix", 0, 0, 0, 0 },
    { "quietprofile", 'q', 0, 0, 0 },
    { "stdin", 's', 0, 0, 0 },
    { "tabcomplete", 0, 0, 0, 0 },
    { "trackall", 'h', 0, 0, 0 },
    { "verbose", 'v', 0, 0, 0 },
    { "vi", 'V', 'V', 0, 0 },
#ifndef SMALL	
    { "xlock", 'X', 0, 0, 0 },
#endif
    { "xtrace", 'x', 0, 0, 0 },
    { "pipefail", 0, 0, 0, 0 },
    { "promptcmds", 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0 }
};
#endif

enum shell_opt_names {
	_SH_OPT_aflag,
	_SH_OPT_cdprint,
#ifdef DEBUG	
	_SH_OPT_debug,
#endif
	_SH_OPT_Eflag,
	_SH_OPT_eflag,
	_SH_OPT_usefork,
	_SH_OPT_Iflag,
	_SH_OPT_iflag,
	_SH_OPT_fnline1,
	_SH_OPT_mflag,
	_SH_OPT_Cflag,
	_SH_OPT_nflag,
	_SH_OPT_fflag,
	_SH_OPT_nolog,
	_SH_OPT_pflag,
	_SH_OPT_bflag,
	_SH_OPT_uflag,
	_SH_OPT_posix,
	_SH_OPT_qflag,
	_SH_OPT_sflag,
	_SH_OPT_tabcomplete,
	_SH_OPT_hflag,
	_SH_OPT_vflag,
	_SH_OPT_Vflag,
#ifndef SMALL	
	_SH_OPT_Xflag,
#endif
	_SH_OPT_xflag,
	_SH_OPT_pipefail,
	_SH_OPT_promptcmds,
};

#ifdef DEFINE_OPTIONS
const unsigned char optorder[] = {
	_SH_OPT_aflag,
	_SH_OPT_bflag,
	_SH_OPT_Cflag,
	_SH_OPT_Eflag,
	_SH_OPT_eflag,
	_SH_OPT_usefork,
	_SH_OPT_fflag,
	_SH_OPT_hflag,
	_SH_OPT_Iflag,
	_SH_OPT_iflag,
	_SH_OPT_fnline1,
	_SH_OPT_mflag,
	_SH_OPT_nflag,
	_SH_OPT_pflag,
	_SH_OPT_qflag,
	_SH_OPT_sflag,
	_SH_OPT_uflag,
	_SH_OPT_Vflag,
	_SH_OPT_vflag,
#ifndef SMALL
	_SH_OPT_Xflag,
#endif
	_SH_OPT_xflag,
};

#define NOPTS (sizeof optlist / sizeof optlist[0] - 1)
int sizeof_optlist = sizeof optlist;

const int option_flags = (sizeof optorder / sizeof optorder[0]);

#else

extern struct optent optlist[];
extern int sizeof_optlist;
extern const unsigned char optorder[];
extern const int option_flags;

#endif

#define aflag	optlist[_SH_OPT_aflag].val
#define cdprint	optlist[_SH_OPT_cdprint].val
#ifdef DEBUG	
#define debug	optlist[_SH_OPT_debug].val
#endif
#define Eflag	optlist[_SH_OPT_Eflag].val
#define eflag	optlist[_SH_OPT_eflag].val
#define usefork	optlist[_SH_OPT_usefork].val
#define Iflag	optlist[_SH_OPT_Iflag].val
#define iflag	optlist[_SH_OPT_iflag].val
#define fnline1	optlist[_SH_OPT_fnline1].val
#define mflag	optlist[_SH_OPT_mflag].val
#define Cflag	optlist[_SH_OPT_Cflag].val
#define nflag	optlist[_SH_OPT_nflag].val
#define fflag	optlist[_SH_OPT_fflag].val
#define nolog	optlist[_SH_OPT_nolog].val
#define pflag	optlist[_SH_OPT_pflag].val
#define bflag	optlist[_SH_OPT_bflag].val
#define uflag	optlist[_SH_OPT_uflag].val
#define posix	optlist[_SH_OPT_posix].val
#define qflag	optlist[_SH_OPT_qflag].val
#define sflag	optlist[_SH_OPT_sflag].val
#define tabcomplete	optlist[_SH_OPT_tabcomplete].val
#define hflag	optlist[_SH_OPT_hflag].val
#define vflag	optlist[_SH_OPT_vflag].val
#define Vflag	optlist[_SH_OPT_Vflag].val
#ifndef SMALL	
#define Xflag	optlist[_SH_OPT_Xflag].val
#endif
#define xflag	optlist[_SH_OPT_xflag].val
#define pipefail	optlist[_SH_OPT_pipefail].val
#define promptcmds	optlist[_SH_OPT_promptcmds].val

#endif

